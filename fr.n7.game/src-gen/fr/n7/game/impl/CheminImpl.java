/**
 * generated by Xtext 2.23.0
 */
package fr.n7.game.impl;

import fr.n7.game.Chemin;
import fr.n7.game.Condition;
import fr.n7.game.Connaissances;
import fr.n7.game.GamePackage;
import fr.n7.game.Lieu;
import fr.n7.game.ObjetsExplorateur;
import fr.n7.game.ObjetsLieu;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getConditionDescription <em>Condition Description</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getObligatoire <em>Obligatoire</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getOuvert <em>Ouvert</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeConnaissances <em>Liste Connaissances</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeObjets <em>Liste Objets</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeObjetsConsommes <em>Liste Objets Consommes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends MinimalEObjectImpl.Container implements Chemin
{
  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditionDescription() <em>Condition Description</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionDescription()
   * @generated
   * @ordered
   */
  protected Condition conditionDescription;

  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected Lieu destination;

  /**
   * The cached value of the '{@link #getObligatoire() <em>Obligatoire</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObligatoire()
   * @generated
   * @ordered
   */
  protected Condition obligatoire;

  /**
   * The cached value of the '{@link #getVisible() <em>Visible</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisible()
   * @generated
   * @ordered
   */
  protected Condition visible;

  /**
   * The cached value of the '{@link #getOuvert() <em>Ouvert</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOuvert()
   * @generated
   * @ordered
   */
  protected Condition ouvert;

  /**
   * The cached value of the '{@link #getListeConnaissances() <em>Liste Connaissances</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeConnaissances()
   * @generated
   * @ordered
   */
  protected Connaissances listeConnaissances;

  /**
   * The cached value of the '{@link #getListeObjets() <em>Liste Objets</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjets()
   * @generated
   * @ordered
   */
  protected ObjetsLieu listeObjets;

  /**
   * The cached value of the '{@link #getListeObjetsConsommes() <em>Liste Objets Consommes</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjetsConsommes()
   * @generated
   * @ordered
   */
  protected ObjetsExplorateur listeObjetsConsommes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheminImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.CHEMIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionDescription()
  {
    return conditionDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionDescription(Condition newConditionDescription, NotificationChain msgs)
  {
    Condition oldConditionDescription = conditionDescription;
    conditionDescription = newConditionDescription;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__CONDITION_DESCRIPTION, oldConditionDescription, newConditionDescription);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionDescription(Condition newConditionDescription)
  {
    if (newConditionDescription != conditionDescription)
    {
      NotificationChain msgs = null;
      if (conditionDescription != null)
        msgs = ((InternalEObject)conditionDescription).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__CONDITION_DESCRIPTION, null, msgs);
      if (newConditionDescription != null)
        msgs = ((InternalEObject)newConditionDescription).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__CONDITION_DESCRIPTION, null, msgs);
      msgs = basicSetConditionDescription(newConditionDescription, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__CONDITION_DESCRIPTION, newConditionDescription, newConditionDescription));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDestination(Lieu newDestination, NotificationChain msgs)
  {
    Lieu oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__DESTINATION, oldDestination, newDestination);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDestination(Lieu newDestination)
  {
    if (newDestination != destination)
    {
      NotificationChain msgs = null;
      if (destination != null)
        msgs = ((InternalEObject)destination).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__DESTINATION, null, msgs);
      if (newDestination != null)
        msgs = ((InternalEObject)newDestination).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__DESTINATION, null, msgs);
      msgs = basicSetDestination(newDestination, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__DESTINATION, newDestination, newDestination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getObligatoire()
  {
    return obligatoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetObligatoire(Condition newObligatoire, NotificationChain msgs)
  {
    Condition oldObligatoire = obligatoire;
    obligatoire = newObligatoire;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OBLIGATOIRE, oldObligatoire, newObligatoire);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObligatoire(Condition newObligatoire)
  {
    if (newObligatoire != obligatoire)
    {
      NotificationChain msgs = null;
      if (obligatoire != null)
        msgs = ((InternalEObject)obligatoire).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__OBLIGATOIRE, null, msgs);
      if (newObligatoire != null)
        msgs = ((InternalEObject)newObligatoire).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__OBLIGATOIRE, null, msgs);
      msgs = basicSetObligatoire(newObligatoire, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OBLIGATOIRE, newObligatoire, newObligatoire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getVisible()
  {
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetVisible(Condition newVisible, NotificationChain msgs)
  {
    Condition oldVisible = visible;
    visible = newVisible;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__VISIBLE, oldVisible, newVisible);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisible(Condition newVisible)
  {
    if (newVisible != visible)
    {
      NotificationChain msgs = null;
      if (visible != null)
        msgs = ((InternalEObject)visible).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__VISIBLE, null, msgs);
      if (newVisible != null)
        msgs = ((InternalEObject)newVisible).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__VISIBLE, null, msgs);
      msgs = basicSetVisible(newVisible, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__VISIBLE, newVisible, newVisible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getOuvert()
  {
    return ouvert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetOuvert(Condition newOuvert, NotificationChain msgs)
  {
    Condition oldOuvert = ouvert;
    ouvert = newOuvert;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OUVERT, oldOuvert, newOuvert);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOuvert(Condition newOuvert)
  {
    if (newOuvert != ouvert)
    {
      NotificationChain msgs = null;
      if (ouvert != null)
        msgs = ((InternalEObject)ouvert).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__OUVERT, null, msgs);
      if (newOuvert != null)
        msgs = ((InternalEObject)newOuvert).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__OUVERT, null, msgs);
      msgs = basicSetOuvert(newOuvert, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OUVERT, newOuvert, newOuvert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connaissances getListeConnaissances()
  {
    return listeConnaissances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListeConnaissances(Connaissances newListeConnaissances, NotificationChain msgs)
  {
    Connaissances oldListeConnaissances = listeConnaissances;
    listeConnaissances = newListeConnaissances;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_CONNAISSANCES, oldListeConnaissances, newListeConnaissances);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeConnaissances(Connaissances newListeConnaissances)
  {
    if (newListeConnaissances != listeConnaissances)
    {
      NotificationChain msgs = null;
      if (listeConnaissances != null)
        msgs = ((InternalEObject)listeConnaissances).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_CONNAISSANCES, null, msgs);
      if (newListeConnaissances != null)
        msgs = ((InternalEObject)newListeConnaissances).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_CONNAISSANCES, null, msgs);
      msgs = basicSetListeConnaissances(newListeConnaissances, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_CONNAISSANCES, newListeConnaissances, newListeConnaissances));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjetsLieu getListeObjets()
  {
    return listeObjets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListeObjets(ObjetsLieu newListeObjets, NotificationChain msgs)
  {
    ObjetsLieu oldListeObjets = listeObjets;
    listeObjets = newListeObjets;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS, oldListeObjets, newListeObjets);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeObjets(ObjetsLieu newListeObjets)
  {
    if (newListeObjets != listeObjets)
    {
      NotificationChain msgs = null;
      if (listeObjets != null)
        msgs = ((InternalEObject)listeObjets).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_OBJETS, null, msgs);
      if (newListeObjets != null)
        msgs = ((InternalEObject)newListeObjets).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_OBJETS, null, msgs);
      msgs = basicSetListeObjets(newListeObjets, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS, newListeObjets, newListeObjets));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjetsExplorateur getListeObjetsConsommes()
  {
    return listeObjetsConsommes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetListeObjetsConsommes(ObjetsExplorateur newListeObjetsConsommes, NotificationChain msgs)
  {
    ObjetsExplorateur oldListeObjetsConsommes = listeObjetsConsommes;
    listeObjetsConsommes = newListeObjetsConsommes;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, oldListeObjetsConsommes, newListeObjetsConsommes);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeObjetsConsommes(ObjetsExplorateur newListeObjetsConsommes)
  {
    if (newListeObjetsConsommes != listeObjetsConsommes)
    {
      NotificationChain msgs = null;
      if (listeObjetsConsommes != null)
        msgs = ((InternalEObject)listeObjetsConsommes).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, null, msgs);
      if (newListeObjetsConsommes != null)
        msgs = ((InternalEObject)newListeObjetsConsommes).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, null, msgs);
      msgs = basicSetListeObjetsConsommes(newListeObjetsConsommes, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, newListeObjetsConsommes, newListeObjetsConsommes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return basicSetConditionDescription(null, msgs);
      case GamePackage.CHEMIN__DESTINATION:
        return basicSetDestination(null, msgs);
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return basicSetObligatoire(null, msgs);
      case GamePackage.CHEMIN__VISIBLE:
        return basicSetVisible(null, msgs);
      case GamePackage.CHEMIN__OUVERT:
        return basicSetOuvert(null, msgs);
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        return basicSetListeConnaissances(null, msgs);
      case GamePackage.CHEMIN__LISTE_OBJETS:
        return basicSetListeObjets(null, msgs);
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        return basicSetListeObjetsConsommes(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__DESCRIPTION:
        return getDescription();
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return getConditionDescription();
      case GamePackage.CHEMIN__DESTINATION:
        return getDestination();
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return getObligatoire();
      case GamePackage.CHEMIN__VISIBLE:
        return getVisible();
      case GamePackage.CHEMIN__OUVERT:
        return getOuvert();
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        return getListeConnaissances();
      case GamePackage.CHEMIN__LISTE_OBJETS:
        return getListeObjets();
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        return getListeObjetsConsommes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        setConditionDescription((Condition)newValue);
        return;
      case GamePackage.CHEMIN__DESTINATION:
        setDestination((Lieu)newValue);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire((Condition)newValue);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible((Condition)newValue);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert((Condition)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        setListeConnaissances((Connaissances)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        setListeObjets((ObjetsLieu)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        setListeObjetsConsommes((ObjetsExplorateur)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        setConditionDescription((Condition)null);
        return;
      case GamePackage.CHEMIN__DESTINATION:
        setDestination((Lieu)null);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire((Condition)null);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible((Condition)null);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert((Condition)null);
        return;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        setListeConnaissances((Connaissances)null);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        setListeObjets((ObjetsLieu)null);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        setListeObjetsConsommes((ObjetsExplorateur)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return conditionDescription != null;
      case GamePackage.CHEMIN__DESTINATION:
        return destination != null;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return obligatoire != null;
      case GamePackage.CHEMIN__VISIBLE:
        return visible != null;
      case GamePackage.CHEMIN__OUVERT:
        return ouvert != null;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        return listeConnaissances != null;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        return listeObjets != null;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        return listeObjetsConsommes != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //CheminImpl
