/**
 * generated by Xtext 2.23.0
 */
package fr.n7.game.impl;

import fr.n7.game.Chemin;
import fr.n7.game.Condition;
import fr.n7.game.Connaissance;
import fr.n7.game.GamePackage;
import fr.n7.game.Lieu;
import fr.n7.game.ObjetsExplorateur;
import fr.n7.game.ObjetsLieu;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chemin</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getName <em>Name</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getDescription <em>Description</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getConditionDescription <em>Condition Description</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getSource <em>Source</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getDestination <em>Destination</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getObligatoire <em>Obligatoire</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getVisible <em>Visible</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getOuvert <em>Ouvert</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeConnaissances <em>Liste Connaissances</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeObjets <em>Liste Objets</em>}</li>
 *   <li>{@link fr.n7.game.impl.CheminImpl#getListeObjetsConsommes <em>Liste Objets Consommes</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheminImpl extends MinimalEObjectImpl.Container implements Chemin
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected static final String DESCRIPTION_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDescription() <em>Description</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDescription()
   * @generated
   * @ordered
   */
  protected String description = DESCRIPTION_EDEFAULT;

  /**
   * The cached value of the '{@link #getConditionDescription() <em>Condition Description</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConditionDescription()
   * @generated
   * @ordered
   */
  protected Condition conditionDescription;

  /**
   * The cached value of the '{@link #getSource() <em>Source</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSource()
   * @generated
   * @ordered
   */
  protected Lieu source;

  /**
   * The cached value of the '{@link #getDestination() <em>Destination</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDestination()
   * @generated
   * @ordered
   */
  protected Lieu destination;

  /**
   * The cached value of the '{@link #getObligatoire() <em>Obligatoire</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getObligatoire()
   * @generated
   * @ordered
   */
  protected Condition obligatoire;

  /**
   * The cached value of the '{@link #getVisible() <em>Visible</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getVisible()
   * @generated
   * @ordered
   */
  protected Condition visible;

  /**
   * The cached value of the '{@link #getOuvert() <em>Ouvert</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getOuvert()
   * @generated
   * @ordered
   */
  protected Condition ouvert;

  /**
   * The cached value of the '{@link #getListeConnaissances() <em>Liste Connaissances</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeConnaissances()
   * @generated
   * @ordered
   */
  protected Connaissance listeConnaissances;

  /**
   * The cached value of the '{@link #getListeObjets() <em>Liste Objets</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjets()
   * @generated
   * @ordered
   */
  protected ObjetsLieu listeObjets;

  /**
   * The cached value of the '{@link #getListeObjetsConsommes() <em>Liste Objets Consommes</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getListeObjetsConsommes()
   * @generated
   * @ordered
   */
  protected ObjetsExplorateur listeObjetsConsommes;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheminImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.CHEMIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getDescription()
  {
    return description;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDescription(String newDescription)
  {
    String oldDescription = description;
    description = newDescription;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__DESCRIPTION, oldDescription, description));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getConditionDescription()
  {
    return conditionDescription;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConditionDescription(Condition newConditionDescription, NotificationChain msgs)
  {
    Condition oldConditionDescription = conditionDescription;
    conditionDescription = newConditionDescription;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__CONDITION_DESCRIPTION, oldConditionDescription, newConditionDescription);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConditionDescription(Condition newConditionDescription)
  {
    if (newConditionDescription != conditionDescription)
    {
      NotificationChain msgs = null;
      if (conditionDescription != null)
        msgs = ((InternalEObject)conditionDescription).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__CONDITION_DESCRIPTION, null, msgs);
      if (newConditionDescription != null)
        msgs = ((InternalEObject)newConditionDescription).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.CHEMIN__CONDITION_DESCRIPTION, null, msgs);
      msgs = basicSetConditionDescription(newConditionDescription, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__CONDITION_DESCRIPTION, newConditionDescription, newConditionDescription));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getSource()
  {
    if (source != null && source.eIsProxy())
    {
      InternalEObject oldSource = (InternalEObject)source;
      source = (Lieu)eResolveProxy(oldSource);
      if (source != oldSource)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__SOURCE, oldSource, source));
      }
    }
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetSource()
  {
    return source;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSource(Lieu newSource)
  {
    Lieu oldSource = source;
    source = newSource;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__SOURCE, oldSource, source));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Lieu getDestination()
  {
    if (destination != null && destination.eIsProxy())
    {
      InternalEObject oldDestination = (InternalEObject)destination;
      destination = (Lieu)eResolveProxy(oldDestination);
      if (destination != oldDestination)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__DESTINATION, oldDestination, destination));
      }
    }
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Lieu basicGetDestination()
  {
    return destination;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDestination(Lieu newDestination)
  {
    Lieu oldDestination = destination;
    destination = newDestination;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__DESTINATION, oldDestination, destination));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getObligatoire()
  {
    if (obligatoire != null && obligatoire.eIsProxy())
    {
      InternalEObject oldObligatoire = (InternalEObject)obligatoire;
      obligatoire = (Condition)eResolveProxy(oldObligatoire);
      if (obligatoire != oldObligatoire)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__OBLIGATOIRE, oldObligatoire, obligatoire));
      }
    }
    return obligatoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition basicGetObligatoire()
  {
    return obligatoire;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setObligatoire(Condition newObligatoire)
  {
    Condition oldObligatoire = obligatoire;
    obligatoire = newObligatoire;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OBLIGATOIRE, oldObligatoire, obligatoire));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getVisible()
  {
    if (visible != null && visible.eIsProxy())
    {
      InternalEObject oldVisible = (InternalEObject)visible;
      visible = (Condition)eResolveProxy(oldVisible);
      if (visible != oldVisible)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__VISIBLE, oldVisible, visible));
      }
    }
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition basicGetVisible()
  {
    return visible;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setVisible(Condition newVisible)
  {
    Condition oldVisible = visible;
    visible = newVisible;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__VISIBLE, oldVisible, visible));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Condition getOuvert()
  {
    if (ouvert != null && ouvert.eIsProxy())
    {
      InternalEObject oldOuvert = (InternalEObject)ouvert;
      ouvert = (Condition)eResolveProxy(oldOuvert);
      if (ouvert != oldOuvert)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__OUVERT, oldOuvert, ouvert));
      }
    }
    return ouvert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Condition basicGetOuvert()
  {
    return ouvert;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setOuvert(Condition newOuvert)
  {
    Condition oldOuvert = ouvert;
    ouvert = newOuvert;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__OUVERT, oldOuvert, ouvert));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Connaissance getListeConnaissances()
  {
    if (listeConnaissances != null && listeConnaissances.eIsProxy())
    {
      InternalEObject oldListeConnaissances = (InternalEObject)listeConnaissances;
      listeConnaissances = (Connaissance)eResolveProxy(oldListeConnaissances);
      if (listeConnaissances != oldListeConnaissances)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__LISTE_CONNAISSANCES, oldListeConnaissances, listeConnaissances));
      }
    }
    return listeConnaissances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Connaissance basicGetListeConnaissances()
  {
    return listeConnaissances;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeConnaissances(Connaissance newListeConnaissances)
  {
    Connaissance oldListeConnaissances = listeConnaissances;
    listeConnaissances = newListeConnaissances;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_CONNAISSANCES, oldListeConnaissances, listeConnaissances));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjetsLieu getListeObjets()
  {
    if (listeObjets != null && listeObjets.eIsProxy())
    {
      InternalEObject oldListeObjets = (InternalEObject)listeObjets;
      listeObjets = (ObjetsLieu)eResolveProxy(oldListeObjets);
      if (listeObjets != oldListeObjets)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__LISTE_OBJETS, oldListeObjets, listeObjets));
      }
    }
    return listeObjets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjetsLieu basicGetListeObjets()
  {
    return listeObjets;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeObjets(ObjetsLieu newListeObjets)
  {
    ObjetsLieu oldListeObjets = listeObjets;
    listeObjets = newListeObjets;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS, oldListeObjets, listeObjets));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ObjetsExplorateur getListeObjetsConsommes()
  {
    if (listeObjetsConsommes != null && listeObjetsConsommes.eIsProxy())
    {
      InternalEObject oldListeObjetsConsommes = (InternalEObject)listeObjetsConsommes;
      listeObjetsConsommes = (ObjetsExplorateur)eResolveProxy(oldListeObjetsConsommes);
      if (listeObjetsConsommes != oldListeObjetsConsommes)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, oldListeObjetsConsommes, listeObjetsConsommes));
      }
    }
    return listeObjetsConsommes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ObjetsExplorateur basicGetListeObjetsConsommes()
  {
    return listeObjetsConsommes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setListeObjetsConsommes(ObjetsExplorateur newListeObjetsConsommes)
  {
    ObjetsExplorateur oldListeObjetsConsommes = listeObjetsConsommes;
    listeObjetsConsommes = newListeObjetsConsommes;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES, oldListeObjetsConsommes, listeObjetsConsommes));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return basicSetConditionDescription(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__NAME:
        return getName();
      case GamePackage.CHEMIN__DESCRIPTION:
        return getDescription();
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return getConditionDescription();
      case GamePackage.CHEMIN__SOURCE:
        if (resolve) return getSource();
        return basicGetSource();
      case GamePackage.CHEMIN__DESTINATION:
        if (resolve) return getDestination();
        return basicGetDestination();
      case GamePackage.CHEMIN__OBLIGATOIRE:
        if (resolve) return getObligatoire();
        return basicGetObligatoire();
      case GamePackage.CHEMIN__VISIBLE:
        if (resolve) return getVisible();
        return basicGetVisible();
      case GamePackage.CHEMIN__OUVERT:
        if (resolve) return getOuvert();
        return basicGetOuvert();
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        if (resolve) return getListeConnaissances();
        return basicGetListeConnaissances();
      case GamePackage.CHEMIN__LISTE_OBJETS:
        if (resolve) return getListeObjets();
        return basicGetListeObjets();
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        if (resolve) return getListeObjetsConsommes();
        return basicGetListeObjetsConsommes();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__NAME:
        setName((String)newValue);
        return;
      case GamePackage.CHEMIN__DESCRIPTION:
        setDescription((String)newValue);
        return;
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        setConditionDescription((Condition)newValue);
        return;
      case GamePackage.CHEMIN__SOURCE:
        setSource((Lieu)newValue);
        return;
      case GamePackage.CHEMIN__DESTINATION:
        setDestination((Lieu)newValue);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire((Condition)newValue);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible((Condition)newValue);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert((Condition)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        setListeConnaissances((Connaissance)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        setListeObjets((ObjetsLieu)newValue);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        setListeObjetsConsommes((ObjetsExplorateur)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__NAME:
        setName(NAME_EDEFAULT);
        return;
      case GamePackage.CHEMIN__DESCRIPTION:
        setDescription(DESCRIPTION_EDEFAULT);
        return;
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        setConditionDescription((Condition)null);
        return;
      case GamePackage.CHEMIN__SOURCE:
        setSource((Lieu)null);
        return;
      case GamePackage.CHEMIN__DESTINATION:
        setDestination((Lieu)null);
        return;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        setObligatoire((Condition)null);
        return;
      case GamePackage.CHEMIN__VISIBLE:
        setVisible((Condition)null);
        return;
      case GamePackage.CHEMIN__OUVERT:
        setOuvert((Condition)null);
        return;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        setListeConnaissances((Connaissance)null);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        setListeObjets((ObjetsLieu)null);
        return;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        setListeObjetsConsommes((ObjetsExplorateur)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.CHEMIN__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case GamePackage.CHEMIN__DESCRIPTION:
        return DESCRIPTION_EDEFAULT == null ? description != null : !DESCRIPTION_EDEFAULT.equals(description);
      case GamePackage.CHEMIN__CONDITION_DESCRIPTION:
        return conditionDescription != null;
      case GamePackage.CHEMIN__SOURCE:
        return source != null;
      case GamePackage.CHEMIN__DESTINATION:
        return destination != null;
      case GamePackage.CHEMIN__OBLIGATOIRE:
        return obligatoire != null;
      case GamePackage.CHEMIN__VISIBLE:
        return visible != null;
      case GamePackage.CHEMIN__OUVERT:
        return ouvert != null;
      case GamePackage.CHEMIN__LISTE_CONNAISSANCES:
        return listeConnaissances != null;
      case GamePackage.CHEMIN__LISTE_OBJETS:
        return listeObjets != null;
      case GamePackage.CHEMIN__LISTE_OBJETS_CONSOMMES:
        return listeObjetsConsommes != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", description: ");
    result.append(description);
    result.append(')');
    return result.toString();
  }

} //CheminImpl
