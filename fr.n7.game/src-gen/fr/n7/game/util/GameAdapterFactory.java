/**
 * generated by Xtext 2.23.0
 */
package fr.n7.game.util;

import fr.n7.game.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see fr.n7.game.GamePackage
 * @generated
 */
public class GameAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static GamePackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public GameAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = GamePackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameSwitch<Adapter> modelSwitch =
    new GameSwitch<Adapter>()
    {
      @Override
      public Adapter caseGame(Game object)
      {
        return createGameAdapter();
      }
      @Override
      public Adapter caseterritoireElement(territoireElement object)
      {
        return createterritoireElementAdapter();
      }
      @Override
      public Adapter caseExplorateur(Explorateur object)
      {
        return createExplorateurAdapter();
      }
      @Override
      public Adapter caseSac(Sac object)
      {
        return createSacAdapter();
      }
      @Override
      public Adapter caseLieu(Lieu object)
      {
        return createLieuAdapter();
      }
      @Override
      public Adapter casePersonnes(Personnes object)
      {
        return createPersonnesAdapter();
      }
      @Override
      public Adapter casePersonne(Personne object)
      {
        return createPersonneAdapter();
      }
      @Override
      public Adapter caseInteraction(Interaction object)
      {
        return createInteractionAdapter();
      }
      @Override
      public Adapter caseChoix(Choix object)
      {
        return createChoixAdapter();
      }
      @Override
      public Adapter caseAction(Action object)
      {
        return createActionAdapter();
      }
      @Override
      public Adapter caseObjetExplorateur(ObjetExplorateur object)
      {
        return createObjetExplorateurAdapter();
      }
      @Override
      public Adapter caseObjetLieu(ObjetLieu object)
      {
        return createObjetLieuAdapter();
      }
      @Override
      public Adapter caseObjetsExplorateur(ObjetsExplorateur object)
      {
        return createObjetsExplorateurAdapter();
      }
      @Override
      public Adapter caseObjetsLieu(ObjetsLieu object)
      {
        return createObjetsLieuAdapter();
      }
      @Override
      public Adapter caseConnaissances(Connaissances object)
      {
        return createConnaissancesAdapter();
      }
      @Override
      public Adapter caseConnaissance(Connaissance object)
      {
        return createConnaissanceAdapter();
      }
      @Override
      public Adapter caseConditions(Conditions object)
      {
        return createConditionsAdapter();
      }
      @Override
      public Adapter caseCondition(Condition object)
      {
        return createConditionAdapter();
      }
      @Override
      public Adapter caseChemins(Chemins object)
      {
        return createCheminsAdapter();
      }
      @Override
      public Adapter caseChemin(Chemin object)
      {
        return createCheminAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Game <em>Game</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Game
   * @generated
   */
  public Adapter createGameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.territoireElement <em>territoire Element</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.territoireElement
   * @generated
   */
  public Adapter createterritoireElementAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Explorateur <em>Explorateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Explorateur
   * @generated
   */
  public Adapter createExplorateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Sac <em>Sac</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Sac
   * @generated
   */
  public Adapter createSacAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Lieu <em>Lieu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Lieu
   * @generated
   */
  public Adapter createLieuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Personnes <em>Personnes</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Personnes
   * @generated
   */
  public Adapter createPersonnesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Personne <em>Personne</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Personne
   * @generated
   */
  public Adapter createPersonneAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Interaction <em>Interaction</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Interaction
   * @generated
   */
  public Adapter createInteractionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Choix <em>Choix</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Choix
   * @generated
   */
  public Adapter createChoixAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Action <em>Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Action
   * @generated
   */
  public Adapter createActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.ObjetExplorateur <em>Objet Explorateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.ObjetExplorateur
   * @generated
   */
  public Adapter createObjetExplorateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.ObjetLieu <em>Objet Lieu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.ObjetLieu
   * @generated
   */
  public Adapter createObjetLieuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.ObjetsExplorateur <em>Objets Explorateur</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.ObjetsExplorateur
   * @generated
   */
  public Adapter createObjetsExplorateurAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.ObjetsLieu <em>Objets Lieu</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.ObjetsLieu
   * @generated
   */
  public Adapter createObjetsLieuAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Connaissances <em>Connaissances</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Connaissances
   * @generated
   */
  public Adapter createConnaissancesAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Connaissance <em>Connaissance</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Connaissance
   * @generated
   */
  public Adapter createConnaissanceAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Conditions <em>Conditions</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Conditions
   * @generated
   */
  public Adapter createConditionsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Condition <em>Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Condition
   * @generated
   */
  public Adapter createConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Chemins <em>Chemins</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Chemins
   * @generated
   */
  public Adapter createCheminsAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link fr.n7.game.Chemin <em>Chemin</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see fr.n7.game.Chemin
   * @generated
   */
  public Adapter createCheminAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //GameAdapterFactory
