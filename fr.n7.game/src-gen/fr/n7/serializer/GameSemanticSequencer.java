/*
 * generated by Xtext 2.23.0
 */
package fr.n7.serializer;

import com.google.inject.Inject;
import fr.n7.game.Chemin;
import fr.n7.game.Chemins;
import fr.n7.game.Choix;
import fr.n7.game.Condition;
import fr.n7.game.Conditions;
import fr.n7.game.Connaissance;
import fr.n7.game.Connaissances;
import fr.n7.game.Explorateur;
import fr.n7.game.Game;
import fr.n7.game.GamePackage;
import fr.n7.game.Interaction;
import fr.n7.game.Lieu;
import fr.n7.game.ObjetExplorateur;
import fr.n7.game.ObjetLieu;
import fr.n7.game.ObjetsExplorateur;
import fr.n7.game.ObjetsLieu;
import fr.n7.game.Personne;
import fr.n7.game.Personnes;
import fr.n7.game.Sac;
import fr.n7.services.GameGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.ACTION:
				sequence_Action(context, (fr.n7.game.Action) semanticObject); 
				return; 
			case GamePackage.CHEMIN:
				sequence_Chemin(context, (Chemin) semanticObject); 
				return; 
			case GamePackage.CHEMINS:
				sequence_Chemins(context, (Chemins) semanticObject); 
				return; 
			case GamePackage.CHOIX:
				sequence_Choix(context, (Choix) semanticObject); 
				return; 
			case GamePackage.CONDITION:
				sequence_Condition(context, (Condition) semanticObject); 
				return; 
			case GamePackage.CONDITIONS:
				sequence_Conditions(context, (Conditions) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCE:
				sequence_Connaissance(context, (Connaissance) semanticObject); 
				return; 
			case GamePackage.CONNAISSANCES:
				sequence_Connaissances(context, (Connaissances) semanticObject); 
				return; 
			case GamePackage.EXPLORATEUR:
				sequence_Explorateur(context, (Explorateur) semanticObject); 
				return; 
			case GamePackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GamePackage.INTERACTION:
				sequence_Interaction(context, (Interaction) semanticObject); 
				return; 
			case GamePackage.LIEU:
				sequence_Lieu(context, (Lieu) semanticObject); 
				return; 
			case GamePackage.OBJET_EXPLORATEUR:
				sequence_ObjetExplorateur(context, (ObjetExplorateur) semanticObject); 
				return; 
			case GamePackage.OBJET_LIEU:
				sequence_ObjetLieu(context, (ObjetLieu) semanticObject); 
				return; 
			case GamePackage.OBJETS_EXPLORATEUR:
				sequence_ObjetsExplorateur(context, (ObjetsExplorateur) semanticObject); 
				return; 
			case GamePackage.OBJETS_LIEU:
				sequence_ObjetsLieu(context, (ObjetsLieu) semanticObject); 
				return; 
			case GamePackage.PERSONNE:
				sequence_Personne(context, (Personne) semanticObject); 
				return; 
			case GamePackage.PERSONNES:
				sequence_Personnes(context, (Personnes) semanticObject); 
				return; 
			case GamePackage.SAC:
				sequence_Sac(context, (Sac) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Action returns Action
	 *
	 * Constraint:
	 *     (
	 *         texte=STRING 
	 *         conditionAction=Condition? 
	 *         listeChoix=[Choix|ID]* 
	 *         listeConnaissances=[Connaissance|ID]* 
	 *         listeObjets=[ObjetLieu|ID]* 
	 *         attributionConnaissance=Condition? 
	 *         attributionObjet=Condition? 
	 *         listeObjetsConsommes=[ObjetExplorateur|ID]* 
	 *         listeQuantite=INT* 
	 *         consommationObjet=Condition?
	 *     )
	 */
	protected void sequence_Action(ISerializationContext context, fr.n7.game.Action semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Chemin returns Chemin
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         description=STRING 
	 *         conditionDescription=Condition? 
	 *         source=[Lieu|ID] 
	 *         destination=[Lieu|ID] 
	 *         obligatoire=[Condition|ID]? 
	 *         visible=[Condition|ID]? 
	 *         ouvert=[Condition|ID]? 
	 *         listeConnaissances=[Connaissance|ID]* 
	 *         listeObjets=[ObjetsLieu|ID]* 
	 *         listeObjetsConsommes=[ObjetsExplorateur|ID]*
	 *     )
	 */
	protected void sequence_Chemin(ISerializationContext context, Chemin semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Chemins
	 *     Chemins returns Chemins
	 *
	 * Constraint:
	 *     listeChemins=Chemin+
	 */
	protected void sequence_Chemins(ISerializationContext context, Chemins semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Choix returns Choix
	 *
	 * Constraint:
	 *     (name=ID texte=STRING listeActions=Action+ (choixdebut=STRING conditonChoixDebut=Condition)? (choixfin=STRING conditionChoixFin=Condition)?)
	 */
	protected void sequence_Choix(ISerializationContext context, Choix semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Condition returns Condition
	 *
	 * Constraint:
	 *     (name=ID condition=STRING)
	 */
	protected void sequence_Condition(ISerializationContext context, Condition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CONDITION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CONDITION__NAME));
			if (transientValues.isValueTransient(semanticObject, GamePackage.Literals.CONDITION__CONDITION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, GamePackage.Literals.CONDITION__CONDITION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getConditionAccess().getConditionSTRINGTerminalRuleCall_1_0(), semanticObject.getCondition());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Conditions
	 *     Conditions returns Conditions
	 *
	 * Constraint:
	 *     listeConditions+=Condition+
	 */
	protected void sequence_Conditions(ISerializationContext context, Conditions semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Connaissance returns Connaissance
	 *
	 * Constraint:
	 *     (name=ID (description=STRING conditionConnaissance=Condition?)?)
	 */
	protected void sequence_Connaissance(ISerializationContext context, Connaissance semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Connaissances
	 *     Connaissances returns Connaissances
	 *
	 * Constraint:
	 *     listeConnaissances+=Connaissance+
	 */
	protected void sequence_Connaissances(ISerializationContext context, Connaissances semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Explorateur
	 *     Explorateur returns Explorateur
	 *
	 * Constraint:
	 *     (name=ID sac=Sac connaissances=[Connaissance|ID]* position=[Lieu|ID])
	 */
	protected void sequence_Explorateur(ISerializationContext context, Explorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (name=ID territoireElements+=territoireElement+)
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Interaction returns Interaction
	 *
	 * Constraint:
	 *     (name=ID texte=STRING interactionElements=Choix*)
	 */
	protected void sequence_Interaction(ISerializationContext context, Interaction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Lieu
	 *     Lieu returns Lieu
	 *
	 * Constraint:
	 *     (
	 *         type=TypeLieu 
	 *         name=ID 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         personnes=[Personne|ID]* 
	 *         connaissances=[Connaissance|ID]* 
	 *         objets=[ObjetLieu|ID]* 
	 *         depotObjet=Condition? 
	 *         listeChemins=[Chemin|ID]*
	 *     )
	 */
	protected void sequence_Lieu(ISerializationContext context, Lieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjetExplorateur returns ObjetExplorateur
	 *
	 * Constraint:
	 *     (name=ID taille=INT quantite=INT (description=STRING conditionDescription=Condition?)? transformable=Condition?)
	 */
	protected void sequence_ObjetExplorateur(ISerializationContext context, ObjetExplorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ObjetLieu returns ObjetLieu
	 *
	 * Constraint:
	 *     (
	 *         name=ID 
	 *         taille=INT 
	 *         quantite=INT 
	 *         conditionTransmission=Condition? 
	 *         conditionConsommation=Condition? 
	 *         (description=STRING conditionDescription=Condition?)? 
	 *         transformable=Condition?
	 *     )
	 */
	protected void sequence_ObjetLieu(ISerializationContext context, ObjetLieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns ObjetsExplorateur
	 *     ObjetsExplorateur returns ObjetsExplorateur
	 *
	 * Constraint:
	 *     listeObjets=ObjetExplorateur+
	 */
	protected void sequence_ObjetsExplorateur(ISerializationContext context, ObjetsExplorateur semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns ObjetsLieu
	 *     ObjetsLieu returns ObjetsLieu
	 *
	 * Constraint:
	 *     listeObjets=ObjetLieu+
	 */
	protected void sequence_ObjetsLieu(ISerializationContext context, ObjetsLieu semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Personne returns Personne
	 *
	 * Constraint:
	 *     (name=ID visible=[Condition|ID]? obligatoire=[Condition|ID]? personneElements=Interaction)
	 */
	protected void sequence_Personne(ISerializationContext context, Personne semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     territoireElement returns Personnes
	 *     Personnes returns Personnes
	 *
	 * Constraint:
	 *     listePersonnes=Personne+
	 */
	protected void sequence_Personnes(ISerializationContext context, Personnes semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Sac returns Sac
	 *
	 * Constraint:
	 *     (taille=INT sacElements=[ObjetExplorateur|ID]*)
	 */
	protected void sequence_Sac(ISerializationContext context, Sac semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
